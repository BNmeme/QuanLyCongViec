package com.example.quanlycongviec.data.repository

import com.example.quanlycongviec.domain.model.User
import com.example.quanlycongviec.domain.model.UserPreferences
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.tasks.await

class UserRepository(
    private val firestore: FirebaseFirestore
) {
    private val usersCollection = firestore.collection("users")

    suspend fun getUserById(userId: String): User {
        val document = usersCollection.document(userId).get().await()
        if (document.exists()) {
            val user = document.toObject(User::class.java)
            return user ?: throw Exception("Failed to parse user data")
        } else {
            throw Exception("User not found")
        }
    }

    suspend fun updateUserPreference(userId: String, key: String, value: Any) {
        val userDoc = usersCollection.document(userId).get().await()

        if (userDoc.exists()) {
            val user = userDoc.toObject(User::class.java)
            if (user != null) {
                // Get current preferences or create new ones
                val currentPrefs = user.preferences ?: UserPreferences()

                // Create updated preferences based on the key
                val updatedPrefs = when (key) {
                    "darkModeEnabled" -> currentPrefs.copy(darkModeEnabled = value as Boolean)
                    "notificationsEnabled" -> currentPrefs.copy(notificationsEnabled = value as Boolean)
                    "reminderTimeBeforeDeadline" -> currentPrefs.copy(reminderTimeBeforeDeadline = value as Int)
                    else -> currentPrefs
                }

                // Update the user document with new preferences
                usersCollection.document(userId)
                    .update("preferences", updatedPrefs)
                    .await()
            }
        } else {
            throw Exception("User not found")
        }
    }

    suspend fun createUser(user: User) {
        usersCollection.document(user.id).set(user).await()
    }

    suspend fun updateUser(user: User) {
        usersCollection.document(user.id).set(user).await()
    }
}
