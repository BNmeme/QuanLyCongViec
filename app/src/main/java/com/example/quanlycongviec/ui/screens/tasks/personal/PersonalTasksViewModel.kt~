package com.example.quanlycongviec.ui.screens.personal

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.quanlycongviec.data.repository.AuthRepository
import com.example.quanlycongviec.data.repository.TaskRepository
import com.example.quanlycongviec.di.AppModule
import com.example.quanlycongviec.domain.model.Task
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch

class PersonalTasksViewModel : ViewModel() {
    private val authRepository = AppModule.provideAuthRepository()
    private val taskRepository = AppModule.provideTaskRepository()
    
    private val _uiState = MutableStateFlow(PersonalTasksUiState())
    val uiState: StateFlow<PersonalTasksUiState> = _uiState.asStateFlow()
    
    init {
        loadTasks()
    }
    
    private fun loadTasks() {
        viewModelScope.launch {
            _uiState.update { it.copy(isLoading = true) }
            
            try {
                val currentUserId = authRepository.getCurrentUserId()
                if (currentUserId != null) {
                    val tasks = taskRepository.getPersonalTasks(currentUserId)
                    _uiState.update { 
                        it.copy(
                            isLoading = false,
                            tasks = tasks
                        ) 
                    }
                }
            } catch (e: Exception) {
                _uiState.update { 
                    it.copy(
                        isLoading = false,
                        errorMessage = "Failed to load tasks: ${e.message}"
                    ) 
                }
            }
        }
    }
    
    fun addTask(task: Task, onComplete: () -> Unit) {
        viewModelScope.launch {
            try {
                taskRepository.createTask(task)
                loadTasks()
                onComplete()
            } catch (e: Exception) {
                _uiState.update { 
                    it.copy(errorMessage = "Failed to add task: ${e.message}") 
                }
            }
        }
    }
    
    fun showAddTaskDialog() {
        _uiState.update { it.copy(showAddTaskDialog = true) }
    }
    
    fun hideAddTaskDialog() {
        _uiState.update { it.copy(showAddTaskDialog = false) }
    }
}

data class PersonalTasksUiState(
    val isLoading: Boolean = false,
    val tasks: List<Task> = emptyList(),
    val showAddTaskDialog: Boolean = false,
    val errorMessage: String? = null
)
